
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.17.0
 * Query Engine version: 393aa359c9ad4a4bb28630fb5613f9c281cde053
 */
Prisma.prismaVersion = {
  client: "5.17.0",
  engine: "393aa359c9ad4a4bb28630fb5613f9c281cde053"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.NotFoundError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`NotFoundError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerified: 'emailVerified',
  image: 'image',
  password: 'password',
  sendLoginInfo: 'sendLoginInfo',
  role: 'role',
  isTwoFactorEnabled: 'isTwoFactorEnabled',
  categoryId: 'categoryId',
  phoneNumber: 'phoneNumber',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country'
};

exports.Prisma.SiteScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  logo: 'logo',
  font: 'font',
  image: 'image',
  imageBlurhash: 'imageBlurhash',
  subdomain: 'subdomain',
  customDomain: 'customDomain',
  message404: 'message404',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.SiteDailyScheduleScalarFieldEnum = {
  id: 'id',
  dayOfWeek: 'dayOfWeek',
  siteId: 'siteId',
  isWorkingDay: 'isWorkingDay'
};

exports.Prisma.SiteWorkTimeScalarFieldEnum = {
  id: 'id',
  startTime: 'startTime',
  endTime: 'endTime',
  siteDailyScheduleId: 'siteDailyScheduleId'
};

exports.Prisma.SiteBreakTimeScalarFieldEnum = {
  id: 'id',
  startTime: 'startTime',
  endTime: 'endTime',
  siteDailyScheduleId: 'siteDailyScheduleId'
};

exports.Prisma.AccountScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  type: 'type',
  provider: 'provider',
  providerAccountId: 'providerAccountId',
  refresh_token: 'refresh_token',
  access_token: 'access_token',
  expires_at: 'expires_at',
  token_type: 'token_type',
  scope: 'scope',
  id_token: 'id_token',
  session_state: 'session_state',
  oauth_token_secret: 'oauth_token_secret',
  oauth_token: 'oauth_token'
};

exports.Prisma.SessionScalarFieldEnum = {
  id: 'id',
  sessionToken: 'sessionToken',
  userId: 'userId',
  expires: 'expires'
};

exports.Prisma.VerificationTokenScalarFieldEnum = {
  identifier: 'identifier',
  email: 'email',
  token: 'token',
  expire: 'expire'
};

exports.Prisma.PasswordResetTokenScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.TwoFactorTokenScalarFieldEnum = {
  id: 'id',
  email: 'email',
  token: 'token',
  expires: 'expires'
};

exports.Prisma.TwoFactorConfirmationScalarFieldEnum = {
  id: 'id',
  userId: 'userId'
};

exports.Prisma.FeatureGroupScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.CustomFeatureScalarFieldEnum = {
  id: 'id',
  title: 'title',
  shortDesc: 'shortDesc',
  longDesc: 'longDesc',
  image: 'image',
  status: 'status',
  isActive: 'isActive',
  warningMessage: 'warningMessage',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId',
  groupId: 'groupId'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  image: 'image',
  isVisibleOnMainPage: 'isVisibleOnMainPage',
  isFeatured: 'isFeatured',
  position: 'position'
};

exports.Prisma.SuggestedServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  categoryId: 'categoryId'
};

exports.Prisma.DurationScalarFieldEnum = {
  id: 'id',
  title: 'title'
};

exports.Prisma.ServiceDailyScheduleScalarFieldEnum = {
  id: 'id',
  dayOfWeek: 'dayOfWeek',
  serviceId: 'serviceId',
  isWorkingDay: 'isWorkingDay'
};

exports.Prisma.ServiceWorkTimeScalarFieldEnum = {
  id: 'id',
  startTime: 'startTime',
  endTime: 'endTime',
  serviceDailyScheduleId: 'serviceDailyScheduleId'
};

exports.Prisma.ServiceBreakTimeScalarFieldEnum = {
  id: 'id',
  startTime: 'startTime',
  endTime: 'endTime',
  serviceDailyScheduleId: 'serviceDailyScheduleId'
};

exports.Prisma.ServiceScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  image: 'image',
  isOnMainPage: 'isOnMainPage',
  price: 'price',
  salesTax: 'salesTax',
  directLink: 'directLink',
  maxBookingPerSlot: 'maxBookingPerSlot',
  durationId: 'durationId',
  categoryId: 'categoryId',
  providerId: 'providerId',
  siteId: 'siteId'
};

exports.Prisma.LocationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country',
  workingHoursId: 'workingHoursId',
  companyId: 'companyId'
};

exports.Prisma.BookingScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  serviceId: 'serviceId',
  providerId: 'providerId',
  appointmentId: 'appointmentId',
  bookingDate: 'bookingDate',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  phoneNumber: 'phoneNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProviderDailyScheduleScalarFieldEnum = {
  id: 'id',
  dayOfWeek: 'dayOfWeek',
  providerId: 'providerId',
  isWorkingDay: 'isWorkingDay'
};

exports.Prisma.WorkTimeScalarFieldEnum = {
  id: 'id',
  startTime: 'startTime',
  endTime: 'endTime',
  providerDailyScheduleId: 'providerDailyScheduleId'
};

exports.Prisma.BreakTimeScalarFieldEnum = {
  id: 'id',
  startTime: 'startTime',
  endTime: 'endTime',
  providerDailyScheduleId: 'providerDailyScheduleId'
};

exports.Prisma.ProviderScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  image: 'image',
  phone: 'phone',
  email: 'email',
  maxCapacity: 'maxCapacity',
  bookingLink: 'bookingLink',
  siteId: 'siteId',
  isOnBookingPage: 'isOnBookingPage'
};

exports.Prisma.AppointmentScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  serviceId: 'serviceId',
  providerId: 'providerId',
  appointmentTime: 'appointmentTime',
  duration: 'duration',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ServiceAvailabilityScalarFieldEnum = {
  id: 'id',
  date: 'date',
  startTime: 'startTime',
  endTime: 'endTime',
  serviceId: 'serviceId',
  providerId: 'providerId'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  barcode: 'barcode',
  image: 'image',
  description: 'description',
  price: 'price',
  vat: 'vat',
  productLocation: 'productLocation',
  isOnBookingPage: 'isOnBookingPage',
  addToBookingPrice: 'addToBookingPrice',
  serviceId: 'serviceId'
};

exports.Prisma.MembershipScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  image: 'image',
  durationDays: 'durationDays',
  durationMonths: 'durationMonths',
  durationYears: 'durationYears',
  startDate: 'startDate',
  price: 'price',
  salesTax: 'salesTax',
  totalSessions: 'totalSessions',
  maxActiveBookings: 'maxActiveBookings',
  isVisibleOnBooking: 'isVisibleOnBooking',
  showAfterMembership: 'showAfterMembership',
  bookingLink: 'bookingLink',
  serviceId: 'serviceId'
};

exports.Prisma.ServiceQuestionScalarFieldEnum = {
  id: 'id',
  title: 'title',
  fieldType: 'fieldType',
  defaultValue: 'defaultValue',
  isOptional: 'isOptional',
  isVisibleForAll: 'isVisibleForAll',
  isVisibleOnBooking: 'isVisibleOnBooking',
  addToInvoice: 'addToInvoice',
  position: 'position',
  serviceId: 'serviceId'
};

exports.Prisma.ServiceTimeScalarFieldEnum = {
  value: 'value',
  label: 'label'
};

exports.Prisma.PostScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  description: 'description',
  slug: 'slug',
  userId: 'userId',
  published: 'published',
  siteId: 'siteId',
  companyWorkingHoursId: 'companyWorkingHoursId',
  visibility: 'visibility',
  status: 'status',
  publishDate: 'publishDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  category: 'category',
  keywords: 'keywords',
  image: 'image',
  imageBlurhash: 'imageBlurhash',
  thumbnail: 'thumbnail',
  links: 'links'
};

exports.Prisma.CompanyScalarFieldEnum = {
  id: 'id',
  name: 'name',
  logo: 'logo',
  companyImage: 'companyImage',
  phone: 'phone',
  email: 'email',
  website: 'website',
  description: 'description',
  address: 'address',
  city: 'city',
  state: 'state',
  zipCode: 'zipCode',
  country: 'country',
  socialMediaLinks: 'socialMediaLinks',
  policies: 'policies',
  aboutUs: 'aboutUs',
  contactUs: 'contactUs',
  faq: 'faq'
};

exports.Prisma.CompanyWorkingHoursScalarFieldEnum = {
  id: 'id',
  companyId: 'companyId',
  dayOfWeek: 'dayOfWeek',
  isOpen: 'isOpen',
  openTime: 'openTime',
  closeTime: 'closeTime',
  breakStart: 'breakStart',
  breakEnd: 'breakEnd'
};

exports.Prisma.UserGroupScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  permissions: 'permissions',
  userId: 'userId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  USER: 'USER'
};

exports.Dayofweek = exports.$Enums.Dayofweek = {
  MONDAY: 'MONDAY',
  TUESDAY: 'TUESDAY',
  WEDNESDAY: 'WEDNESDAY',
  THURSDAY: 'THURSDAY',
  FRIDAY: 'FRIDAY',
  SATURDAY: 'SATURDAY',
  SUNDAY: 'SUNDAY'
};

exports.FeatureStatus = exports.$Enums.FeatureStatus = {
  FREE: 'FREE',
  POPULAR: 'POPULAR',
  MARKETING: 'MARKETING',
  NEW: 'NEW'
};

exports.BookingStatus = exports.$Enums.BookingStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CANCELED: 'CANCELED',
  COMPLETED: 'COMPLETED'
};

exports.AppointmentStatus = exports.$Enums.AppointmentStatus = {
  PENDING: 'PENDING',
  CONFIRMED: 'CONFIRMED',
  CANCELED: 'CANCELED',
  COMPLETED: 'COMPLETED'
};

exports.FildType = exports.$Enums.FildType = {
  CHECKBOX: 'CHECKBOX',
  TEXTBox_SingleLine: 'TEXTBox_SingleLine',
  TEXTBox_MultipleLines: 'TEXTBox_MultipleLines',
  TEXTBox_DigitsOnly: 'TEXTBox_DigitsOnly',
  DROPDOWN_Selection: 'DROPDOWN_Selection',
  DATE: 'DATE',
  BARCODE: 'BARCODE',
  HTML_Custom: 'HTML_Custom'
};

exports.Prisma.ModelName = {
  User: 'User',
  Site: 'Site',
  SiteDailySchedule: 'SiteDailySchedule',
  SiteWorkTime: 'SiteWorkTime',
  SiteBreakTime: 'SiteBreakTime',
  Account: 'Account',
  Session: 'Session',
  VerificationToken: 'VerificationToken',
  PasswordResetToken: 'PasswordResetToken',
  TwoFactorToken: 'TwoFactorToken',
  TwoFactorConfirmation: 'TwoFactorConfirmation',
  FeatureGroup: 'FeatureGroup',
  CustomFeature: 'CustomFeature',
  category: 'category',
  SuggestedService: 'SuggestedService',
  duration: 'duration',
  ServiceDailySchedule: 'ServiceDailySchedule',
  ServiceWorkTime: 'ServiceWorkTime',
  ServiceBreakTime: 'ServiceBreakTime',
  service: 'service',
  Location: 'Location',
  Booking: 'Booking',
  Customer: 'Customer',
  ProviderDailySchedule: 'ProviderDailySchedule',
  WorkTime: 'WorkTime',
  BreakTime: 'BreakTime',
  provider: 'provider',
  Appointment: 'Appointment',
  ServiceAvailability: 'ServiceAvailability',
  product: 'product',
  membership: 'membership',
  serviceQuestion: 'serviceQuestion',
  serviceTime: 'serviceTime',
  Post: 'Post',
  company: 'company',
  companyWorkingHours: 'companyWorkingHours',
  userGroup: 'userGroup'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
